1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою даної лабораторної роботи є  розробка програмного забезпечення для IoT пристою, що є частиною програмної системи для розумного розподілення комунальними ресурсами. Необхідно описати прийняті інженерні рішення, побудувати діаграми, представити будову системи та її взаємодію з іншими частинами системи


1.2	Моделювання програмної системи


Для детального розуміння взаємодії між різними складовими програмного продукту EcoMeChan були розроблені UML діаграми прецедентів (додаток А, рисунок А.1 - А.2), що відображають основні функції та взаємозв'язки в системі.
Для актора «Контролер» (додаток А, рисунок А.1), що представляє мікроконтролер, основні сценарії включають зчитування даних з сенсорів, таких як датчики витрати води, електроенергії та газу, обчислення відповідних показників, перетворення одиниць вимірювання та порівняння з допустимими значеннями для кожного ресурсу. Також включено функції взаємодії з сервером, які охоплюють надсилання повідомлень, отримання даних про користувача, ресурси, тарифи та ціни, а також авторизацію користувачів.
Актор «Користувач» (додаток А, рисунок А.2) в системі включає можливості встановлення конфігураційних параметрів для мікроконтролера, налаштування Wi-Fi з'єднань, визначення частоти зчитування та відправлення даних, а також редагування детальних параметрів сенсорів і мережі. 
Варто зазначити, що взаємодія між користувачем та системою EcoMeChan не обмежується лише налаштуванням параметрів. Користувач також має змогу переглядати статистику споживання ресурсів, отримувати сповіщення про відхилення від норми та аналізувати витрати за певний період. Ці функції забезпечують користувачу повний контроль над споживанням ресурсів та дозволяють приймати обґрунтовані рішення щодо їх економії.
Функціональність програми представлена на UML діаграмі діяльності (додаток А, рисунок А.3), де можна побачити, що IoT-пристрій виконує зчитування даних з датчиків витрати ресурсів, обчислює показники та спілкується з сервером для передачі повідомлень від мікроконтролера та отримання даних про користувача, ресурси, тарифи та ціни.
Цілісний цикл роботи системи EcoMeChan описується таким чином:
1. Користувач спочатку налаштовує мережеві параметри IoT-пристрою локально. Після цього, пристрій звертається до сервера для отримання даних для подальшого використання у мікроконтролері.
2. Починається збір даних з сенсорів витрати води, електроенергії та газу, їх обробка та надсилання на сервер. Цей процес включає отримання та аналіз показників витрат ресурсів, порівняння їх з допустимими значеннями для кожного ресурсу та відправлення повідомлень про будь-які відхилення.
3. Розраховується споживання ресурсів за визначений період та відповідні витрати згідно встановлених тарифів, що важливо для статистичного аналізу та оновлення інформації для користувача.
Кожен з цих етапів детально представлений на UML діаграмі взаємодії (додаток А, рисунок А.4), яка ілюструє взаємодію між компонентами системи та послідовність дій, необхідних для їх виконання. Це дозволяє забезпечити глибоке розуміння процесів, що відбуваються в системі, та спрощує подальше налаштування та управління EcoMeChan.


1.3	Взаємодія між частинами системи

Інтеграція IoT-пристрою в системі EcoMeChan із сервером забезпечує централізований обмін даними та управління командами. Серверна частина, яка є мостом між IoT-пристроями та іншими компонентами системи, керує процесами збору даних про витрати комунальних ресурсів -- води, електроенергії та газу. Отримані від сенсорів дані аналізуються сервером з метою виявлення відхилень від норм споживання, і у випадку критичних змін, відправляється повідомлення до сервера через визначені методи.
Для наочності процесу обробки та обміну даними між IoT-пристроєм і сервером було розроблено UML-діаграму діяльності, яка відображає кроки взаємодії та логіку обробки інформації (див. додаток А, рисунок А.4). Ця діаграма детально демонструє як IoT-пристрій спілкується з сервером, як відбувається запис даних в базу, їх аналіз, розрахунок витрат згідно тарифів, а також механізм реагування на виявлені несправності чи відхилення в показниках споживання ресурсів. 
Сервер також відповідає за зберігання та надання актуальної інформації про тарифи та ціни на комунальні ресурси, яка використовується IoT-пристроєм для розрахунку витрат користувача. При зміні тарифів, сервер оновлює дані і відправляє їх на пристрій, забезпечуючи точність обчислень.
Ще однією важливою функцією серверу є управління обліковими записами користувачів. При ініціалізації IoT-пристрою, він звертається до серверу для автентифікації користувача та отримання його персональних даних, таких як ідентифікатор, ім'я, адреса тощо. Ці дані необхідні для коректної роботи системи та формування деталізованих звітів про споживання ресурсів для конкретного користувача.
Завдяки цій діаграмі можна ознайомитись з послідовністю обробки даних та керування подіями в системі EcoMeChan. Вона ілюструє тісну взаємодію між IoT-пристроєм, який є джерелом первинних даних про витрати ресурсів, та сервером, що виконує роль центрального вузла обробки, аналізу та зберігання інформації. Така архітектура дозволяє ефективно управляти процесом моніторингу споживання ресурсів, забезпечуючи користувачів актуальними даними та можливістю контролювати свої витрати.
 
2 ПРОЕКТУВАННЯ БАЗИ ДАНИХ
2.1	Архітектура програмної системи


Програмне забезпечення для EcoMeChan було розроблено з використанням мови програмування C++ у середовищі Arduino у симуляторі Wokwi. Для моделювання фізичної системи обрано мікроконтролер ESP32, який відзначається вбудованим Wi-Fi модулем, необхідним для з'єднання з мережею та взаємодії з серверною частиною системи EcoMeChan. В якості основних сенсорів використовуються фоторезистори (LDR) для моніторингу споживання води, газу та електроенергії.
В програмній частині проекту використовуються різні бібліотеки для оптимізації роботи та забезпечення необхідних функцій. Серед них -- бібліотека HTTPClient для реалізації HTTP запитів до сервера, ArduinoJson для обробки JSON даних отриманих від сервера, Effortless-SPIFFS та SD для роботи з файловою системою та зберігання конфігураційних параметрів.
Архітектура програмної системи EcoMeChan базується на принципах модульності та розподілу відповідальності. Код розділений на окремі файли та класи, кожен з яких відповідає за певну функціональність. Файли config.h та config.json містять конфігураційні параметри системи, такі як піни підключення сенсорів, налаштування Wi-Fi, адреси серверу тощо. Файл authentication_service.cpp відповідає за автентифікацію користувача на сервері, тоді як data_collection_service.cpp здійснює збір даних з сенсорів та відправку їх на сервер. Файл consumption_repository.cpp виконує операції з даними про споживання ресурсів, такі як перетворення одиниць вимірювання, а tariff_repository.cpp забезпечує отримання даних про тарифи з серверу. Файл notification_service.cpp відповідає за відправку сповіщень та статистики на сервер, а analytics_service.cpp здійснює розрахунок статистичних показників споживання ресурсів. Файл sensor_service.cpp містить функції для зчитування даних з сенсорів, а user_singleton.h реалізує шаблон Singleton для зберігання даних про користувача. Файл utils.cpp містить допоміжні функції, такі як форматування дати та часу.
Така архітектура забезпечує гнучкість, можливість розширення функціоналу та зручність підтримки коду. Модульний підхід дозволяє легко додавати нові функції, змінювати існуючі та проводити тестування окремих компонентів системи.


2.2	Програмна розробка системи


Перед початком написання коду для системи EcoMeChan було ретельно сплановано фізичне підключення компонентів: сенсорів та мікроконтролера (див. додаток А, рисунок А.5). У конструкції використовується мікроконтролер ESP32, до якого підключені фоторезистори (LDR) для збору даних про споживання води, газу та електроенергії, під'єднані до GPIO33, GPIO34 та GPIO35 відповідно. Також до мікроконтролера підключено microSD картку через відповідні піни для зберігання конфігураційних параметрів.
Для живлення мікроконтролера використовується джерело живлення, що підключається через вхід 3V3. Заземлення (GND) мікроконтролера з'єднується з відповідними GND контактами сенсорів для завершення електричного кола.
По завершенню фізичної побудови системи, починається етап написання програмного коду. На цьому етапі ініціюється оголошення глобальних змінних, які використовуватимуться в усьому коді для зберігання зібраних даних з сенсорів і для налаштування мережевих параметрів. Це включає інформацію для з'єднання з Wi-Fi мережею, таку як SSID та пароль, параметри сервера, включаючи його URL та ідентифікатори IoT пристроїв. Також встановлюються інтервали часу для зчитування даних з сенсорів, відправки даних на сервер та розрахунку статистики.
Метод setup() ініціалізує систему, здійснюючи підключення до Wi-Fi, синхронізацію часу через NTP сервер та автентифікацію користувача. Цей процес описується у файлі sketch.ino (див. додаток Б.1, рядки 35-69).
Метод loop() відповідає за постійне зчитування даних із сенсорів та відправлення їх на сервер для оновлення бази даних. Він також включає логіку порівняння отриманих даних із заданими пороговими значеннями для кожного ресурсу, і в разі виявлення перевищень, ініціює відправлення повідомлень через метод sendNotificationToServer(). Процес зчитування даних та їх відправки описано в методі loop() у файлі sketch.ino (див. додаток Б.1, рядки 74-162).
Окрім цього, в архітектурі програмної системи EcoMeChan були застосовані певні шаблони проектування та архітектурні рішення для покращення якості коду та його підтримки. Система була розділена на логічні частини, кожна з яких відповідає за певну функціональність, що відображено в структурі файлів та класів. Наприклад, класи TariffRepository та ConsumptionRepository (див. додаток Б.2 та Б.3) реалізують шаблон Repository для доступу до даних тарифів та споживання з серверу. Вони інкапсулюють логіку взаємодії з сервером та надають зручний інтерфейс для отримання необхідних даних.
Також, було застосовано шаблон Singleton для глобальних об'єктів, таких як Config (див. додаток Б.4) та User (див. додаток Б.5). Це забезпечує наявність лише одного екземпляру цих об'єктів в системі та зручний доступ до них з різних частин програми.
Функції sendSensorDataToServer() (див. додаток Б.6, рядки 10-41), sendConsumptionToServer() (див. додаток Б.6, рядки 43-75) та sendNotificationToServer() (див. додаток Б.7, рядки 9-44) є частиною сервісу збору даних та відправки їх на сервер. Вони інкапсулюють логіку формування JSON payload та виконання HTTP запитів.
Функції calculateConsumptionStats() (див. додаток Б.8, рядки 8-41) та formatStatsMessage() (див. додаток Б.2) (див. додаток Б.8, рядки 43-56) відповідають за розрахунок статистичних показників споживання ресурсів та формування текстових повідомлень зі статистикою. Вони є частиною сервісу аналітики та статистики.


2.3	Висновки


В ході даної лабораторної роботи було розроблено програмне забезпечення для пристрою IoT, що є частиною програмної системи для розумного розподілення комунальними ресурсами. Було описано архітектуру системи, програмну реалізацію описано фізичну схему, її взаємодію з іншими частинами системи, розроблено UML діаграми прецедентів, взаємодії, діяльності та станів.
