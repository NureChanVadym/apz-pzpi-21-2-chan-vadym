1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою даної лабораторної роботи є розробка фронтенд частини програмної системи для розумного розподілення комунальними ресурсами. Необхідно описати прийняті інженерні рішення, побудувати діаграми, представити будову системи та її взаємодію з іншими частинами системи.. 


1.2	Моделювання програмної системи


Для розгляду функціональності фронтенд частини програмної системи для розумного розподілення комунальними ресурсами «EcoMeChan» було розроблено декілька UML діаграм прецедентів для ілюстрації взаємодій різних ролей з системою. У цих діаграмах відображені особливості взаємодії для ролей кінцевого користувача та адміністратора, а також деталізовано відображено процеси, пов'язані з керуванням особистими кабінетами користувачів та IoT пристроями.
Діаграма прецедентів для кінцевого користувача (додаток А, рис. А.1) ілюструє важливі взаємодії, такі як реєстрація, авторизація в системі, перегляд актуальної інформації про споживання ресурсів, історії споживання ресурсів, персоналізація інтерфейсу, зміна мови інтерфейсу (українська, англійська), перегляд IoT пристроїв для цього користувача, перегляд та редагування персональних даних (ПІБ, електронна пошта, номер телефону).
Для адміністраторів системи, діаграма прецедентів (додаток А, рис. А.2) демонструє можливості авторизації в системі, управління IoT пристроями (перегляд, створення нових, редагування даних, видалення), моніторинг помилок та збоїв від IoT, адміністрування користувачами (перегляд, створення нових, редагування даних, видалення) та створення резервних копій.
Також було розроблено UML діаграму активності для адміністраторів (додаток А, рисунок А.3), яка представляє дії, пов'язані з особистими кабінетами користувачів, включаючи перегляд списку користувачів, деталей профілів, додавання, видалення, та редагування облікових записів.
Ці діаграми надають детальне уявлення про взаємодії між різними користувачами та компонентами системи «EcoMeChan», сприяючи кращому розумінню функціональності та взаємодій в рамках даної системи.


1.3	Взаємодія між частинами системи


Взаємодія фронтенд частини «EcoMeChan» з іншими частинами системи відбувається через серверну частину, яка використовує .NET і PostgreSQL для роботи з базами даних. Фронтенд відповідає за представлення інтерфейсу користувача, дозволяючи кінцевим користувачам і адміністраторам виконувати такі дії, як реєстрація, авторизація, перегляд інформації про споживання ресурсів, управління IoT пристроями, перегляд та редагування персональних даних. Всі ці функції інтегровані з серверною частиною, яка обробляє запити, забезпечує безпеку даних, централізовано зберігає та обробляє дані користувачів та IoT пристроїв, а також адмініструє права доступу різних категорій користувачів.
Для ілюстрації взаємодії між фронтенд частиною та серверною частиною, можна розглянути UML діаграму взаємодії для процесу управління даними користувачів (додаток А, рисунок А.4). На цій діаграмі відображається послідовність взаємодії між фронтенд частиною, серверною частиною та базою даних. Це включає запити на перегляд списку користувачів, деталей профілів, додавання, редагування та видалення користувачів. Фронтенд відправляє відповідні запити до серверної частини, яка в свою чергу взаємодіє з базою даних для отримання, оновлення або видалення інформації про користувачів. Після обробки запиту, серверна частина відправляє результат назад до фронтенд, де він відображається адміністратору.  
2 ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1	Архітектура програмної системи


Фронтенд частина програмної системи «EcoMeChan» була розроблена з використанням бібліотеки React, яка базується на компонентній архітектурі та дозволяє створювати масштабовані та ефективні веб-застосунки. В якості мови програмування використовується JavaScript, а для стилізації компонентів застосовується CSS.
Структура проекту організована відповідно до принципів розділення відповідальності та модульності. Директорія «src» містить основні файли та підкаталоги, необхідні для роботи застосунку.
Компоненти розміщені в директорії «components» і розділені на окремі файли відповідно до їх функціональності. Наприклад, компоненти Header, Footer та LanguageSelector відповідають за відображення шапки, підвалу сторінки та вибір мови інтерфейсу. Компонент UserForm використовується для відображення форми редагування даних користувача.
Сторінки застосунку знаходяться в директорії «pages» і також розділені за функціональним призначенням. Наприклад, сторінки Home, About, Services, Contacts відповідають за відображення головної сторінки, інформації про систему, послуг та контактних даних. Сторінки для авторизації та реєстрації розміщені в окремих файлах Login.js та Registration.js. Сторінки для різних ролей користувачів (адміністратора та звичайного користувача) розміщені у відповідних підкаталогах «admin» та «user».
Для зберігання глобального стану та забезпечення доступу до нього з різних компонентів використовуються контексти, які знаходяться в директорії «contexts». Зокрема, AuthContext відповідає за зберігання даних про автентифікацію користувача, а LanguageContext - за вибір мови інтерфейсу.
Константи та перелічувані типи, які використовуються в різних частинах застосунку, винесені в окрему директорію «enums». Наприклад, перелічуваний тип Role визначає можливі ролі користувачів в системі.
Для забезпечення багатомовності інтерфейсу використовується бібліотека react-intl, а файли з перекладами знаходяться в директорії «locales».
Сервіси для взаємодії з серверною частиною розміщені в директорії «services». Вони використовують бібліотеку axios для надсилання HTTP-запитів до API.
Допоміжні функції та утиліти, які використовуються в різних частинах застосунку, знаходяться в директорії «utils». Наприклад, функції для форматування дати та часу, а також для визначення стану та типу IoT-пристроїв.
Для стилізації компонентів та сторінок використовуються окремі файли стилів, які знаходяться в директорії «styles».
Конфігураційні файли, такі як config.json та setupTests.js, розміщені в кореневій директорії проекту.
В процесі розробки використовувалися різноманітні бібліотеки та інструменти, такі як react-router-dom для маршрутизації, bootstrap для стилізації компонентів, date-fns для роботи з датами, axios для надсилання HTTP-запитів.
Завдяки модульній структурі та розділенню відповідальності між компонентами, сторінками та сервісами, фронтенд частина «EcoMeChan» є масштабованою, зручною для підтримки та розширення функціональності.


2.2	Програмна розробка системи


Для візуалізації взаємодії моделей (класів) між собою було розроблено діаграму компонентів (додаток А, рис. А.5).
Процес розробки фронтенд частини програмної системи «EcoMeChan» поєднує різноманітні аспекти програмування, що гарантує її ефективність та зручність. В основі розробки лежить дотримання принципів чистого коду, що включає належне форматування, коментування та іменування елементів. Наприклад, у компоненті Header (див. додаток Б.1, строки 9-40), де формується заголовок застосунку, код чітко розбитий на блоки, із зрозумілими коментарями, які пояснюють кожен крок. Це спрощує розуміння логіки роботи компоненту та його подальшу модифікацію чи відладку.
Критично важливим елементом є обробка помилок, зокрема використання конструкцій try-catch, які дозволяють ефективно управляти винятковими ситуаціями без зупинки всієї системи. У сервісі AuthService (див. додаток Б.2, строки 4-29) цей принцип впроваджено для гарантії безперебійної роботи навіть у випадку непередбачених помилок, таких як некоректні дані користувача або проблеми з мережею.
Локалізація та інтернаціоналізація відіграють ключову роль у забезпеченні доступності та зручності для широкого кола користувачів. Використовуючи бібліотеку react-intl та файли перекладів у форматі JSON (див. додатки Б.3-4), фронтенд частина «EcoMeChan» забезпечує підтримку багатьох мов, що дозволяє користувачам працювати із системою у звичному для них мовному середовищі.
Облік часу в системі також важливий, зокрема у контексті міжнародного використання. Завдяки використанню бібліотеки date-fns та утиліт, таких як DateUtils (див. додаток Б.5), фронтенд застосунок здатен обробляти різні формати дати та часу, забезпечуючи коректне відображення інформації залежно від локалі користувача.
Робота з даними та їх структурами у «EcoMeChan» також відповідає високим стандартам. Наприклад, у компоненті UserConsumptionHistoryPage (див. додаток Б.6, строки 52-58) використовуються функції форматування та перетворення одиниць вимірювання для зручного відображення даних про споживання ресурсів користувачем.
Архітектура фронтенд частини «EcoMeChan» базується на сучасних підходах та принципах розробки програмного забезпечення. Вона включає в себе компонентно-орієнтовану архітектуру, поділ відповідальності, принцип єдиної відповідальності (SRP), ін'єкцію залежностей (DI), принцип DRY, архітектуру "клієнт-сервер" та маршрутизацію.
Компонентно-орієнтована архітектура реалізована через структурування проєкту за допомогою компонентів React, де кожен компонент представляє собою багаторазовий і самодостатній елемент інтерфейсу користувача. Поділ відповідальності досягається через розділення різних аспектів на окремі шари і компоненти, такі як каталоги pages, components, services та contexts.
Принцип єдиної відповідальності (SRP) реалізовано через призначення конкретних обов'язків кожному компоненту та модулю, наприклад, компонент Header відповідає за відображення заголовка застосунку, а сервіс AuthService відповідає за взаємодію з API, пов'язану з аутентифікацією.
Ін'єкція залежностей (DI) здійснюється через API контексту React (AuthContext і LanguageContext) для надання залежностей компонентам, які їх потребують (див. додатки Б.7-8). Принцип DRY реалізовано через повторне використання компонентів та коду, таких як Header, Footer, LanguageSelector та UserForm.
Архітектура «клієнт-сервер» реалізована за допомогою використання сервісів API для взаємодії з сервером. Маршрутизація здійснюється бібліотекою React Router для визначення та управління маршрутами застосунку.


2.3	Висновки


В ході даної лабораторної роботи було розроблено фронтенд частину програмної системи для розумного розподілення комунальними ресурсами «EcoMeChan». Було описано архітектуру системи, програмну реалізацію, її взаємодію з іншими частинами системи, розроблено UML діаграми прецедентів, взаємодії, діяльності та компонентів.
