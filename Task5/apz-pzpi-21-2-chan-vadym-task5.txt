1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою даної лабораторної роботи є розробка мобільної частини програмної системи для розумного розподілення комунальними ресурсами. Необхідно описати прийняті інженерні рішення, побудувати діаграми, представити будову системи та її взаємодію з іншими частинами системи.. 


1.2	Моделювання програмної системи


Для розгляду функціональності мобільної частини програмної системи для розумного розподілення комунальними ресурсами «EcoMeChan» було розроблено декілька UML діаграм прецедентів для ілюстрації взаємодій різних ролей з системою. У цих діаграмах відображені особливості взаємодії для ролей кінцевого користувача та адміністратора, а також деталізовано відображено процеси, пов'язані з керуванням особистими кабінетами користувачів та IoT пристроями.
Діаграма прецедентів для кінцевого користувача (додаток А, рис. А.1) ілюструє важливі взаємодії, такі як реєстрація, авторизація в системі, перегляд актуальної інформації про споживання ресурсів, історії споживання ресурсів, персоналізація інтерфейсу, зміна мови інтерфейсу (українська, англійська), перегляд IoT пристроїв для цього користувача, перегляд та редагування персональних даних (ПІБ, електронна пошта, номер телефону).
Для адміністраторів системи, діаграма прецедентів (додаток А, рис. А.2) демонструє можливості авторизації в системі, управління IoT пристроями (перегляд, створення нових, редагування даних, видалення), моніторинг помилок та збоїв від IoT, адміністрування користувачами (перегляд, створення нових, редагування даних, видалення).
Також було розроблено UML діаграму активності для адміністраторів (додаток А, рисунок А.3), яка представляє дії, пов'язані з особистими кабінетами користувачів, включаючи перегляд списку користувачів, деталей профілів, додавання, видалення, та редагування облікових записів.
Ці діаграми надають детальне уявлення про взаємодії між різними користувачами та компонентами системи «EcoMeChan», сприяючи кращому розумінню функціональності та взаємодій в рамках даної системи.


1.3	Взаємодія між частинами системи


Взаємодія мобільної частини «EcoMeChan» з іншими частинами системи відбувається через серверну частину, яка використовує .NET і PostgreSQL для роботи з базами даних. Мобільний застосунок відповідає за представлення інтерфейсу користувача, дозволяючи кінцевим користувачам і адміністраторам виконувати такі дії, як реєстрація, авторизація, перегляд інформації про споживання ресурсів, управління IoT пристроями, перегляд та редагування персональних даних. Всі ці функції інтегровані з серверною частиною, яка обробляє запити, забезпечує безпеку даних, централізовано зберігає та обробляє дані користувачів та IoT пристроїв, а також адмініструє права доступу різних категорій користувачів.
Для ілюстрації взаємодії між мобільною частиною та серверною частиною, можна розглянути UML діаграму взаємодії для процесу управління даними користувачів (додаток А, рисунок А.4). На цій діаграмі відображається послідовність взаємодії між мобільною частиною, серверною частиною та базою даних. Це включає запити на перегляд списку користувачів, деталей профілів, додавання, редагування та видалення користувачів. Мобільний застосунок відправляє відповідні запити до серверної частини, яка в свою чергу взаємодіє з базою даних для отримання, оновлення або видалення інформації про користувачів. Після обробки запиту, серверна частина відправляє результат назад до мобільного застосунку, де він відображається адміністратору.  
2 ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1	Архітектура програмної системи


Мобільна частина програмної системи «EcoMeChan» була розроблена з використанням фреймворку .NET MAUI (Multi-platform App UI), який дозволяє створювати крос-платформні мобільні застосунки з використанням мови програмування C#. MAUI базується на архітектурі MVVM (Model-View-ViewModel) та забезпечує розділення логіки застосунку, інтерфейсу користувача та взаємодії між ними.
Структура проекту організована відповідно до принципів MVVM та розділена на кілька ключових директорій та файлів. Директорія «Models» містить класи моделей даних, які представляють сутності предметної області, такі як User, IoTDevice, Consumption тощо. Ці класи визначають структуру даних та їх властивості. Директорія «ViewModels» містить класи, які реалізують логіку представлення та обробку даних для відповідних сторінок та компонентів інтерфейсу користувача. Наприклад, LoginViewModel відповідає за логіку авторизації користувача, а ConsumptionHistoryViewModel - за отримання та відображення історії споживання ресурсів.
Директорія «Views» містить xaml-файли, які визначають структуру та розмітку сторінок та компонентів інтерфейсу користувача. Кожна сторінка має відповідний файл, який містить логіку обробки подій та взаємодії з відповідною ViewModel. Директорія «Services» містить класи сервісів, які забезпечують взаємодію з серверною частиною системи через HTTP-запити. Наприклад, AuthService відповідає за автентифікацію користувача, а ConsumptionService - за отримання даних про споживання ресурсів.
Директорія «Enums» містить перелічувані типи, які використовуються в різних частинах застосунку, наприклад, для визначення ролей користувачів та типів сповіщень. Директорія «Resources» містить ресурси застосунку, такі як файли локалізації (AppResources.resx), які забезпечують багатомовність інтерфейсу користувача. Також в цій директорії знаходяться стилі, шрифти та зображення, які використовуються в застосунку.
Файл «App.xaml» та файл «App.xaml.cs» містять логіку ініціалізації та налаштування застосунку, такі як реєстрація сервісів та навігація між сторінками. Файл «AppShell.xaml» та файл «AppShell.xaml.cs» визначають структуру навігації застосунку та містять логіку для відображення панелі вкладок (табів) для різних ролей користувачів.
Взаємодія між компонентами застосунку здійснюється за допомогою прив'язки даних (англ. - data binding) та команд (англ. - commands). ViewModels містять властивості та команди, які прив'язуються до відповідних елементів інтерфейсу користувача у Views. Коли користувач взаємодіє з елементами інтерфейсу, виклики команд передаються до відповідних методів у ViewModels для обробки.
Для забезпечення багатомовності інтерфейсу користувача використовуються ресурсні файли локалізації (AppResources.resx), які містять переклади текстових рядків для різних мов. Застосунок автоматично обирає відповідний ресурсний файл на основі мовних налаштувань пристрою. Для взаємодії з серверною частиною використовуються HTTP-запити, які надсилаються через класи сервісів. Дані, отримані від сервера, десеріалізуються за допомогою бібліотеки Newtonsoft.Json та передаються до відповідних ViewModels для відображення в інтерфейсі користувача.
Архітектура мобільної частини «EcoMeChan» забезпечує чіткий розподіл відповідальності між компонентами, що полегшує розробку, тестування та підтримку застосунку. Використання MVVM дозволяє досягти кращої масштабованості, повторного використання коду та зручності розширення функціональності в майбутньому.


2.2	Програмна розробка системи


Для візуалізації взаємодії моделей (класів) між собою було розроблено діаграму компонентів (додаток А, рис. А.5).
Процес розробки мобільної частини програмної системи «EcoMeChan» базується на дотриманні принципів чистого коду, ефективної обробки помилок, локалізації та інтернаціоналізації, а також на використанні сучасних підходів та архітектурних шаблонів.
Код мобільного застосунку «EcoMeChan» написаний з дотриманням принципів чистого коду, що включає належне форматування, коментування та іменування елементів. Наприклад, у класі App (див. додаток Б.1, рядки 9-53) код розбитий на логічні блоки, використовуються зрозумілі назви змінних та методів, що покращує читабельність та підтримку коду.
Обробка помилок є важливим аспектом розробки мобільного застосунку. У сервісах, таких як AuthService (див. додаток Б.2, рядки 35-39), використовуються блоки try-catch для обробки виняткових ситуацій та запобігання збоїв у роботі застосунку. Це дозволяє обробляти помилки та надавати користувачам інформативні повідомлення.
Локалізація та інтернаціоналізація реалізовані з використанням ресурсних файлів та класу AppResources. Ресурсні файли містять переклади текстових рядків для різних мов, а клас AppResources надає доступ до цих рядків в коді. Це дозволяє легко адаптувати інтерфейс користувача до різних мов та культурних особливостей.
Мобільний застосунок «EcoMeChan» використовує архітектурний шаблон MVVM (Model-View-ViewModel), який забезпечує чіткий поділ відповідальності та покращує тестованість та масштабованість коду. Моделі представляють бізнес-логіку та дані, представлення (Views) відповідають за відображення інтерфейсу користувача, а моделі представлення (ViewModels) забезпечують зв'язок між моделями та представленнями.
Для забезпечення модульності та повторного використання коду, мобільний застосунок розділений на окремі сервіси, такі як AuthService (див. додаток Б.2), ConsumptionService (див. додаток Б.3), IoTDeviceService (див. додаток Б.4) тощо. Ці сервіси інкапсулюють логіку взаємодії з серверною частиною та надають зручний API для використання в інших частинах застосунку.
Для роботи з віддаленим API використовується клас HttpClient та бібліотека Newtonsoft.Json для серіалізації та десеріалізації даних у форматі JSON. Наприклад, у методі LoginAsync сервісу AuthService (див. додаток Б.2, рядки 21-40) виконується запит до серверного API для автентифікації користувача та обробляється відповідь.
В мобільному застосунку «EcoMeChan» також використовуються конвертери значень (англ. - value converters) для перетворення даних між різними типами. Наприклад, клас ResourceTypeConverter (див. додаток Б.5) використовується для перетворення значень перелічуваного типу ResourceType у рядкові представлення з урахуванням поточної мови.
